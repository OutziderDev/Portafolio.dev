---
const {color,type} = Astro.props
---
{
  (()=> {
    switch (type) {
      case 'wave':
        return( 
                <div class={`rotate-180  bottom-10  ${color}`}>
                  <svg data-name="wave"
                    class="wave-svg"
                    xmlns="http://www.w3.org/2000/svg" 
                    viewBox="0 0 1200 120" 
                    preserveAspectRatio="none">
                      <path d="M321.39,56.44c58-10.79,114.16-30.13,172-41.86,82.39-16.72,168.19-17.73,250.45-.39C823.78,31,906.67,72,985.66,92.83c70.05,18.48,146.53,26.09,214.34,3V0H0V27.35A600.21,600.21,0,0,0,321.39,56.44Z" >   
                      </path>
                  </svg>
                </div>
              )
      case 'slice':
        return(
                <div class={` ${color}`}>
                  <svg  data-name="slice"  xmlns="http://www.w3.org/2000/svg" 
                    viewBox="0 0 1200 120" 
                    preserveAspectRatio="none" >                                
                    <path d="M0,0 V3.615 C0,32.76,268.63,56.385,600,56.385 S1200,32.76,1200,3.615 V0 Z" />
                  </svg>
                </div>
              ) 
      case 'triangulo' :
        return(
                <div class={`relative overflow-hidden w-full top-0 left-0 leading-none ${color}`}>
                    <svg data-name="triangule" xmlns="http://www.w3.org/2000/svg"
                         class="relative block w-[150%] h-[90px]"
                         viewBox="0 0 1200 120" 
                         preserveAspectRatio="none">
                        <path d="M1200 0L0 0 598.97 114.72 1200 0z" class="shape-fill"></path>
                    </svg>
                </div>
              )
      default:
        break;
    }
  })
}

<style>
  @keyframes Move {
  0% { transform: translateX(0); }
  50% { transform: translateX(-10px); scale: 115%;} 
  100% { transform: translateX(0); }
}

.rotate-180 path {
  animation: Move 5s ease-in-out infinite;
}

</style>